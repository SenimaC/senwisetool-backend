import { PrismaClient, RequirementChapter } from '@prisma/client';
import { CreateRequirementChapterDto } from '../../src/gestion/requirements/requirement.dto';

const requirementChapters: CreateRequirementChapterDto[] = [
  {
    title: 'Gestion',
    description:
      'Gestion : Ce chapitre couvre la gestion organisationnelle, administrative, l‚Äô√©valuation des risques, l‚Äôauto-√©valuation, les m√©canismes de r√©clamation, l‚Äô√©galit√© des genres et l‚Äôimplication des jeunes travailleurs.',
    number: 1,
  },
  {
    title: 'Tra√ßabilit√©',
    description:
      'Tra√ßabilit√© : Ce chapitre traite de la tra√ßabilit√© des produits, du suivi des volumes certifi√©s, de la plateforme en ligne et du bilan massique.',
    number: 2,
  },
  {
    title: 'Revenu et responsabilit√© partag√©es',
    description:
      'Revenu et responsabilit√© partag√©es : Ce chapitre aborde les co√ªts de production, le revenu vital, le diff√©rentiel de durabilit√© et les investissements pour la durabilit√©.',
    number: 3,
  },
  {
    title: 'Agriculture',
    description:
      'Agriculture : Ce chapitre regroupe les exigences sur la plantation, la rotation, la gestion des sols, la lutte int√©gr√©e contre les ravageurs, la gestion des produits agrochimiques et les pratiques de r√©colte.',
    number: 4,
  },
  {
    title: 'Social',
    description:
      'Social : Ce chapitre couvre les aspects sociaux, y compris le travail des enfants, la discrimination, la libert√© d‚Äôassociation, les salaires, la sant√© et s√©curit√©, les conditions de logement et les relations avec les communaut√©s.',
    number: 5,
  },
  {
    title: 'Environnement',
    description:
      'Environnement : Ce chapitre traite de la protection des for√™ts, de la biodiversit√©, de la gestion de l‚Äôeau, des d√©chets, de l‚Äôefficacit√© √©nerg√©tique et de la r√©duction des gaz √† effet de serre.',
    number: 6,
  },
];

export async function seedChapters(
  prisma: PrismaClient,
): Promise<RequirementChapter[]> {
  console.log('üå± Seeding requirements chapters...');

  const chapters = await Promise.all(
    requirementChapters.map(async (chapter) => {
      return await prisma.requirementChapter.upsert({
        where: { number: chapter.number },
        update: {},
        create: chapter,
      });
    }),
  );

  console.log('‚úÖ Requirements Chapters seeded:', chapters.length);
  return chapters;
}
