// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  OWNER
  PDG
  DG
  ADG
  ASSISTANT
}

enum UserStatus {
  REGISTERED
  ACTIVE
  DISABLED
  DELETED
  BANNED
}

enum SourceSecure {
  SYSTEM
  EXTERNAL
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Permission[] @relation("RolePermissions")
  from        SourceSecure @default(EXTERNAL)
  users       User[]
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id            String  @id @default(cuid())
  name          String  @unique
  roles         Role[]  @relation("RolePermissions")
  description   String?
  from          SourceSecure @default(EXTERNAL)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  // role            UserRole @default(DG)
  createdAt       DateTime @default(now())
  isEmailVerified Boolean  @default(false)

  codeVerificationProcess Boolean   @default(false)
  codeVerification        String?
  codeVerificationExpires DateTime?

  refreshToken String?
  status       UserStatus @default(REGISTERED)

  companyId String?
  Company   Company? @relation(fields: [companyId], references: [id])

  roleId      String
  Role        Role     @relation(fields: [roleId], references: [id])

  AssistantAccount AssistantAccount[]
}

enum CompanyStatus {
  BUILDING
  PENDING
  UNACTIVE
  ACTIVE
  BLOCKED
  REJECTED
  MAINTENANCE
  CLOSE
}

model Company {
  id            String @id @default(cuid())
  name          String
  description   String
  sector        String
  logo          String // URL vers S3
  authorization String // URL vers S3

  country String?
  region  String?
  city    String?
  address String?

  email       String? @unique
  phoneNumber String?

  isEmailVerified          Boolean   @default(false)
  emailVerificationCode    String?
  emailVerificationExpires DateTime?

  bucketName      String? // Nom du bucket AWS S3
  status          CompanyStatus @default(BUILDING)
  onboardingSteps Int[] // ex: [1, 2, 3]
  createdAt       DateTime      @default(now())

  User User[]

  Inspection Inspection[]

  AssistantAccount AssistantAccount[]
}



// Assistant accounts

enum AssistantRole {
  MENDATAIRE
  AGENT
  INSPECTOR
  TRAINER
}

enum AssistantAccountStatus {
  ACTIVE
  BLOCKED
  DISABLED
}

model AssistantAccount {
  id            String                 @id @default(cuid())
  email         String                 @unique
  password      String
  role          AssistantRole          @default(AGENT)
  phoneNumber   String?

  companyId     String
  Company       Company                @relation(fields: [companyId], references: [id])

  userId   String                      @unique
  User     User                        @relation(fields: [userId], references: [id])

  status        AssistantAccountStatus @default(ACTIVE)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  ProjectAssignment ProjectAssignment[]
}



// Campagnes

model Campaign {
  id            String   @id @default(uuid())
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime
  status        CampaignStatus @default(CURRENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Inspection Inspection[]
}

enum CampaignStatus {
  CURRENT
  FINISHED
}


// requirements

model Requirement {
  id             String               @id @default(uuid())
  number         String               @unique
  description    String
  sectionId      String
  section        RequirementSection   @relation(fields: [sectionId], references: [id])
  groups         RequirementGroup[]   @relation("RequirementToGroup")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  Inspection Inspection[]
}

model RequirementGroup {
  id             String               @id @default(uuid())
  name           String               @unique
  type           RequirementGroupType @default(GROUP_CERTIFICATION)
  description    String?
  requirements   Requirement[]        @relation("RequirementToGroup")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model RequirementSection {
  id             String               @id @default(uuid())
  title          String
  description    String?
  number         String                  @unique
  chapterId      String
  chapter        RequirementChapter   @relation(fields: [chapterId], references: [id])
  requirements   Requirement[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model RequirementChapter {
  id             String               @id @default(uuid())
  title          String
  description    String?
  number         Int                  @unique
  sections       RequirementSection[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

enum RequirementGroupType {
  GROUP_CERTIFICATION
  INDIVIDUAL_CERTIFICATION
}



// inspection

model Inspection {
  id              String       @id @default(uuid())
  title           String
  type            InspectionType @default(INITIAL)
  activitySector  String
  description     String
  startAt         DateTime
  endAt           DateTime

  companyId       String
  company         Company      @relation(fields: [companyId], references: [id])

  country         String?
  region          String?
  city            String?
  address         String?

  partnersLogos   String[]

  requirements    Requirement[]

  status          InspectionStatus @default(BUILDING)
  campaignId      String
  Campaign        Campaign      @relation(fields: [campaignId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  ProjectAssignment ProjectAssignment[]
}

enum InspectionType {
  INITIAL
  INTERNAL
}

enum InspectionStatus {
  BUILDING
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ProjectAssignment {
  id                String       @id @default(cuid())
  assistantAccountId String
  AssistantAccount   AssistantAccount @relation(fields: [assistantAccountId], references: [id])

  inspectionId      String?
  Inspection        Inspection? @relation(fields: [inspectionId], references: [id])

  // mappingId      String? // À ajouter quand le modèle Mapping sera créé
  // Mapping        Mapping? @relation(fields: [mappingId], references: [id])

  // trainingId     String? // À ajouter quand le modèle Training sera créé
  // Training       Training? @relation(fields: [trainingId], references: [id])

  assignedAt        DateTime     @default(now())
}
